const {Composer, Keyboard} = require("grammy");
const {Menu, MenuRange} = require("@grammyjs/menu");
const {I18n, hears} = require("@grammyjs/i18n");
const {
    conversations,
    createConversation,
} = require("@grammyjs/conversations");
const {check_user, register_user, remove_user, set_user_lang} = require("../controllers/userController");
const {check_user_admin, logOut_user, my_user_info} = require("../controllers/adminController");
const {enter_to_station_report, find_cargo_by_station,filter_by_station_time, filter_by_leaving_station, find_leaving_station, filter_by_current_station, find_cargo_by_last_station, find_cargo_by_station_time} = require("../controllers/stationReportController");
const {get_all_action, filter_action_by_name, find_cargo_by_action} = require("../controllers/actionController")
const {get_report} = require("../controllers/reportController")

const bot = new Composer();
const i18n = new I18n({
    defaultLocale: "uz",
    useSession: true,
    directory: "locales",
    globalTranslationContext(ctx) {
        return {first_name: ctx.from?.first_name ?? ""};
    },
});
bot.use(i18n);
bot.use(createConversation(register_user_phone));
bot.use(createConversation(main_menu_conversation));
bot.use(createConversation(local_station_conversation));
bot.use(createConversation(station_details_conversation));
bot.use(createConversation(duration_time_conversation));
const pm = bot.chatType("private")


async function register_user_phone(conversation, ctx) {

    let phone_btn = new Keyboard()
        .requestContact("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º")
        .resized();
    await ctx.reply(`
<b>üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —é–±–æ—Ä–∏–Ω–≥</b>

<i>üëá–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.</i> 
   `, {
        parse_mode: "HTML",
        reply_markup: phone_btn
    })

    ctx = await conversation.wait();
    if (check_phone_number(ctx.message, conversation)) {
        do {
            await ctx.reply("–ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞–≥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º", {
                parse_mode: "HTML",
            });
            ctx = await conversation.wait();
        } while (check_phone_number(ctx.message, conversation));
    }

    let phone_number = ctx.session.session_db.client.phone
    if(phone_number[0] !== "+"){
        phone_number = "+"+phone_number;
    }


    let res_status = await  check_user_admin(phone_number, ctx.from.id);
    if(res_status.status){

        // success login
        await ctx.reply(`
<i>üéâ ${res_status.data.full_name} —Å–∏–∑ —Ç–∏–∑–∏–º–≥–∞ –º—É–≤–æ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ä–∞–≤–∏—à–¥–∞ –∫–∏—Ä–¥–∏–Ω–≥–∏–∑!</i>      
        `, {
            parse_mode:"HTML",
            reply_markup: { remove_keyboard: true }
        });
        await main_menu_conversation(conversation, ctx)



    }else{
        // login failed
        let retry_register_btn = new Keyboard()
            .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
            .resized();
        await ctx.reply(`
<b>‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º –±–∞–∑–∞–¥–∞–Ω —Ç–æ–ø–∏–ª–º–∞–¥–∏!</b>   

<i>–≥–∞—Ä —Å–∏–∑ –±—É–Ω–∏ —Ö–∞—Ç–æ –¥–µ–± “≥–∏—Å–æ–±–ª–∞—Å–∞–Ω–≥–∏–∑ “õ—É–π–∏–¥–∞–≥–∏  –º–∞—ä—Å—É–ª —Ö–æ–¥–∏–º–≥–∞ –∞–ª–æ“õ–∞–≥–∞ —á–∏“õ–∏–Ω–≥!</i>  

<i>–ú–∞—ä—Å—É–ª —Ö–æ–¥–∏–º</i>  
<i>üßë‚Äçüíª –ì—É–ª–æ–º–æ–≤ –ë–µ–∫–∑–æ–¥ @Programmer_277</i>   
        `, {
            parse_mode:"HTML",
            reply_markup: retry_register_btn,

        })


    }



}
async function main_menu_conversation(conversation, ctx) {

    let main_btn = new Keyboard()
        .text("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä")
        .row()
        // .text("üì¶ Import yuklar")
        // .row().text("üì¶ Eksport yuklar")
        // .row()
        .text("üë§ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º")
        .text("üì§ –ß–∏“õ–∏—à")
        .row()
        .text("‚òéÔ∏è –°—É–ø–ø–æ—Ä—Ç")
        .resized();

    await ctx.reply(`<i>‚ö°Ô∏è –ê—Å–æ—Å–∏–π –º–µ–Ω—é ‚ö°Ô∏è</i> `, {
        parse_mode:"HTML",
        reply_markup: main_btn,
    });
   return;
}


async function local_station_conversation(conversation, ctx) {

    let group_btn = new Keyboard()
        .text("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞")
        .row()
        .text("üóû –ê–º–∞–ª –±—û–π–∏—á–∞")
        .row()
        .text("üîô –ê—Å–æ—Å–∏–π –º–µ–Ω—é")
        .resized()
    await ctx.reply("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä", {
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
}

async function station_details_conversation(conversation, ctx) {

    let group_btn = new Keyboard()
        .text("üîΩ –ö–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("üîº –ö–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("‚èπ –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏")
        .row()
        .text("üîô –û—Ä“õ–∞–≥–∞")
        .resized()
    await ctx.reply("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞", {
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
}

async function duration_time_conversation(conversation, ctx) {

    let group_btn = new Keyboard()
        .text("1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ üü¢")
        .row()
        .text("6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ üü°")
        .row()
        .text("11 –∫—É–Ω–¥–∞–Ω –∫—û–ø üî¥")
        .row()
        .text("‚óÄÔ∏è –û—Ä“õ–∞–≥–∞")
        .resized()
    await ctx.reply("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏", {
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
}

const check_phone_number = (msg, conversation) => {
    if (msg?.contact) {
        conversation.session.session_db.client.phone = msg.contact.phone_number
        return false
    } else {
        // let reg = new RegExp('^[012345789][0-9]{8}$');
        // conversation.session.session_db.client.phone = reg.test(msg.text) ? "+998" + msg.text : null;
        // return !reg.test(msg.text)
        return true
    }

}


pm.command("start", async (ctx) => {
    if(ctx.config.is_registered){
        await ctx.conversation.enter("main_menu_conversation");
    }else{
        let retry_register_btn = new Keyboard()
            .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
            .resized();
        await ctx.reply(`
<b>–°–∞–ª–æ–º üëã. DAS UTY –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑</b> 

<i>‚ôªÔ∏è –ë–æ—Ç–¥–∞–Ω —Ç—û–ª–∏“õ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω –æ–ª–¥–∏–Ω —Ç–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –ª–æ–∑–∏–º!</i>  
 
<i>–¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω <b>[üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à]</b>  —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.</i>   
    `,{
            parse_mode:"HTML",
            reply_markup: retry_register_btn,
        })
    }

})

pm.hears("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à", async (ctx)=>{
    await ctx.conversation.enter("register_user_phone");
})
pm.hears("üì§ –ß–∏“õ–∏—à", async (ctx)=>{
    let res_data = await logOut_user(ctx.from.id);
    let retry_register_btn = new Keyboard()
        .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
        .resized();
    await ctx.reply("üî¥ –¢–∏–∑–∏–º–¥–∞–Ω —á–∏“õ–¥–∏–Ω–≥–∏–∑!", {
        parse_mode:"HTML",
        reply_markup: retry_register_btn,
    })

})









async function message_sender_station_data(ctx, msg) {
    return new Promise((resolve, reject) => {
        setTimeout(async () => {
            try {
                await  ctx.reply(`
<b><i>#“≤–∏—Å–æ–±–æ—Ç</i></b>
<b>${msg.first_station?.station_name_ru}</b> ‚û°Ô∏è <b>${msg.current_station?.station_name_ru}</b> ‚û°Ô∏è <b>${msg.last_station?.station_name_ru}</b>

üöÉ –í–∞–≥–æ–Ω —Ä–∞“õ–∞–º–∏: <b>${msg.vagon_number}</b>  
üßæ –ü–æ–µ–∑–¥ –∏–Ω–¥–µ—Ö: <b>${msg.index} </b> 

üì¶ –Æ–∫ –Ω–æ–º–∏: <b>${msg.cargo_name}</b>    
üîç –Æ–∫ –º–∞—Å—Å–∞—Å–∏: <b>${Math.ceil(msg.cargo_massa/1000)} —Ç </b>  
 
üèó –ê–º–∞–ª –Ω–æ–º–∏: <b>${msg.action_name}</b>    
üóì –ê–º–∞–ª —Å–∞–Ω–∞—Å–∏: <b>${new Date(msg.action_date).toLocaleDateString('vi-VN')} </b> 
   
üèÅ –ß–∏“õ“õ–∞–Ω —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.first_station?.station_name_ru}</b>     
üè≥Ô∏è –ñ–æ—Ä–∏–π —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.current_station?.station_name_ru} </b>     
‚è∞ –°–∞—Ä–∏—Ñ–ª–∞–Ω–≥–∞–Ω –≤–∞“õ—Ç: <b>${msg.wait_time} –∫—É–Ω</b>     
üè¥ –ë–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.last_station?.station_name_ru} </b>  

#“≤–∏—Å–æ–±–æ—Ç #dasuty_station_bot
‚ìÇÔ∏è –ú–∞–Ω–±–∞: @dasuty_station_bot
    `, {
                    parse_mode:"HTML",
                });
                resolve(true);
            } catch (error) {
                reject(false)
            }

        }, 100)
    })
}


pm.hears("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä", async (ctx)=>{

    await ctx.conversation.enter("local_station_conversation");

})


pm.hears("üì¶ Import yuklar", async (ctx)=>{
    await ctx.reply(`
    <i>‚ö†Ô∏è Bu bo'lim tez orada ishga tushishi reja qilingan</i>
    `,{
        parse_mode:"HTML",
    })
})

pm.hears("üì¶ Eksport yuklar", async (ctx)=>{
    await ctx.reply(`
    <i>‚ö†Ô∏è Bu bo'lim tez orada ishga tushishi reja qilingan</i>
    `,{
        parse_mode:"HTML",
    })
})

const leaving_station_btn = new Menu("leaving_station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_leaving_station(item.user_station_id, item.id);

                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(leaving_station_btn)
pm.hears("üîº –ö–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await filter_by_leaving_station(user_id);

    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–¥–∞–Ω –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ “≥–æ–∑–∏—Ä–¥–∞ —Ç—É—Ä–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count} </b> ta vagon`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b> ta vagon



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: leaving_station_btn,
    })

})



const current_station_btn = new Menu("current_station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_last_station(item.user_station_id, item.id);

                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(current_station_btn)
pm.hears("‚èπ –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await filter_by_current_station(user_id);

    let group_station = res_data.data.group_station;


     ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count} </b> ta vagon`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b> ta vagon



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>
    `
   await ctx.reply(msg_template,{
       parse_mode:"HTML",
       reply_markup: current_station_btn,
   })

})




pm.hears("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏", async (ctx)=>{
    await ctx.conversation.enter("duration_time_conversation");

})



pm.hears("üóû –ê–º–∞–ª –±—û–π–∏—á–∞", async (ctx)=>{

    let res_data = await get_all_action();

    let group_station = res_data.data.map((item)=>item.action_name +" üìÑ")

    const buttonRows = group_station
        .map((label) => [Keyboard.text(label)]);
    const keyboard = Keyboard.from(buttonRows)
        .row()
        .text("üîô –û—Ä“õ–∞–≥–∞")
        .resized();



    let msg_template =  `üóû –ê–º–∞–ª –±—û–π–∏—á–∞`
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: keyboard,
    })

})



const station_btn = new Menu("station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station(item.id, item.user_station_id);
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(station_btn)
pm.hears("üîΩ –ö–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await enter_to_station_report(user_id);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–≥–∞ –∫–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ “≥–æ–∑–∏—Ä–¥–∞ —Ç—É—Ä–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: station_btn,
    })

})

pm.hears("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞", async (ctx)=>{
    await ctx.conversation.enter("station_details_conversation");
})

const duration_1_5_btn = new Menu("duration_1_5_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,0,6 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_1_5_btn)
pm.hears("1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ üü¢", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 0,6);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üü¢ 1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_1_5_btn,
    })
})

const duration_6_10_btn = new Menu("duration_6_10_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,5,11 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_6_10_btn)
pm.hears("6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ üü°", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 5,11);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>‚õîÔ∏è 6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_6_10_btn,
    })
})


const duration_11_btn = new Menu("duration_11_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,10,1000 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_11_btn)
pm.hears("11 –∫—É–Ω–¥–∞–Ω –∫—û–ø üî¥", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 10,1000);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>‚õîÔ∏è 11 –∫—É–Ω–¥–∞–Ω –∫—û–ø —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_11_btn,
    })
})



// back buttons
pm.hears("üîô –ê—Å–æ—Å–∏–π –º–µ–Ω—é", async (ctx)=>{
    await ctx.conversation.enter("main_menu_conversation");
})

pm.hears("üîô –û—Ä“õ–∞–≥–∞", async (ctx)=>{
    await ctx.conversation.enter("local_station_conversation");
})

pm.hears("‚óÄÔ∏è –û—Ä“õ–∞–≥–∞", async (ctx)=>{
    await ctx.conversation.enter("station_details_conversation");
})






// main menu buttons
pm.hears("üë§ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º", async (ctx)=>{

    let res_data = await my_user_info(ctx.from.id);
    let report_data = await get_report();
    let report = report_data.data[0];

    if(res_data.status){
        await ctx.reply(`
<b>üë§ –ü—Ä–æ—Ñ–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º</b>  

üöè –°—Ç–∞–Ω—Å–∏—è: <b>${res_data.data?.organization?.station_name_ru}</b>
üë§ –ò—Å–º: <b>${res_data.data.full_name}</b>
‚òéÔ∏è –¢–µ–ª–ª: <b>${res_data.data.phone}</b>
üÜî –ò–¥: <b>${ctx.from.id}</b>

<b>“≤–ò–°–û–ë–û–¢</b>

<i>‚ôªÔ∏è –¢—É—Ä–∏: <b>${report?.type}</b></i>
<i>üìà –ù–æ–º–∏: <b>${report?.title}</b></i>
<i>üîÑ –û—Ö–∏—Ä–≥–∏ —è–Ω–≥–∏–ª–∞–Ω–∏—à: <b>${report?.date}</b></i>


    `,{
            parse_mode:"HTML",
        })
    }


})
pm.hears("‚òéÔ∏è –°—É–ø–ø–æ—Ä—Ç", async (ctx)=>{
    await ctx.reply(`
<b>‚òéÔ∏è –¢–µ–∑–∫–æ—Ä “õ—û–ª–ª–∞–± “õ—É–≤–∞—Ç–ª–∞—à –º–∞—Ä–∫–∞–∑–∏</b>  

–ú–∞—ä—Å—É–ª –º—É—Ç–∞—Ö–∞—Å–∏—Å–ª–∞—Ä:
<i>üßë‚Äçüíª –ë–µ–∫–∑–æ–¥ –ì—É–ª–æ–º–æ–≤</i>
<b>‚òéÔ∏è @Programmer_277</b>  
<i>üßë‚Äçüíª –ñ–∞–º—à–∏–¥ –†–∞—Ö–∏–º–æ–≤</i>
<b>‚òéÔ∏è @Jamacoder</b>  

<i>‚úçÔ∏è –ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à –≤–∞“õ—Ç–∏–¥–∞ “õ–∞–Ω–¥–∞–π–¥–∏—Ä —Ö–∞—Ç–æ–ª–∏–∫–Ω–∏ —Å–µ–∑—Å–∞–Ω–≥–∏–∑ –º—É—Ç–∞—Ö–∞—Å–∏—Å–ª–∞—Ä–∏–º–∏–∑–≥–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–∏—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑!</i>

    `,{
        parse_mode:"HTML",
    })
})


















const action_name_btn = new Menu("action_name_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_action(item.id, item.user_station_id, item.action_name_id);
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(action_name_btn)

bot.filter(async (ctx)=> ctx.message?.text?.toString()?.includes('üìÑ')).on("msg", async (ctx) => {
    let split_text = ctx.msg.text.split('üìÑ')[0];
    let res_data = await  filter_action_by_name (split_text.trim(), ctx.from.id);
    if(res_data.data){
        console.log(res_data.data)

        let group_station = res_data.data.group_station
        ctx.session.session_db.group_station_list = group_station;
        let msg_template =  `
<b>üìä “≤–∏—Å–æ–±–æ—Ç</b>
    `
        group_station.forEach((item, index)=>{
            msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
        })

        msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá –ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
        await ctx.reply(msg_template,{
            parse_mode:"HTML",
            reply_markup: action_name_btn,
        })



    }
});










module.exports = bot;