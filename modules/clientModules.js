const {Composer, Keyboard, InputFile, session} = require("grammy");
const {Menu, MenuRange} = require("@grammyjs/menu");
const {I18n, hears} = require("@grammyjs/i18n");
const moment = require('moment-timezone');
const {
    conversations,
    createConversation,
} = require("@grammyjs/conversations");
const {check_user_admin, logOut_user, my_user_info} = require("../controllers/adminController");
const {enter_to_station_report, find_cargo_by_station,filter_by_station_time, filter_by_leaving_station, find_leaving_station, filter_by_current_station, find_cargo_by_last_station, find_cargo_by_station_time, search_wagon, noden_report_by_station} = require("../controllers/stationReportController");
const {get_all_action, filter_action_by_name, find_cargo_by_action} = require("../controllers/actionController")
const {get_report} = require("../controllers/reportController");
const {register_order, wagon_order_report} = require("../controllers/wagonOrderController")
const ExcelJS = require('exceljs');
const {wagon_type_list} = require("../Enums/Enums")


const bot = new Composer();
const i18n = new I18n({
    defaultLocale: "uz",
    useSession: true,
    directory: "locales",
    globalTranslationContext(ctx) {
        return {first_name: ctx.from?.first_name ?? ""};
    },
});
bot.use(i18n);
bot.use(createConversation(register_user_phone));
bot.use(createConversation(main_menu_conversation));
bot.use(createConversation(local_station_conversation));
bot.use(createConversation(station_details_conversation));
bot.use(createConversation(duration_time_conversation));
bot.use(createConversation(search_wagon_by_number));
bot.use(createConversation(main_menu_conversation_noden));
bot.use(createConversation(wagon_type_conversation));
bot.use(createConversation(wagon_order_conversation));
bot.use(createConversation(confirm_order_conversation));
bot.use(createConversation(review_order_conversation));


const pm = bot.chatType("private")


async function register_user_phone(conversation, ctx) {

    let phone_btn = new Keyboard()
        .requestContact("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º")
        .resized();
    await ctx.reply(`
<b>üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —é–±–æ—Ä–∏–Ω–≥</b>

<i>üëá–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.</i> 
   `, {
        parse_mode: "HTML",
        reply_markup: phone_btn
    })

    ctx = await conversation.wait();
    if (check_phone_number(ctx.message, conversation)) {
        do {
            await ctx.reply("–ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞–≥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º", {
                parse_mode: "HTML",
            });
            ctx = await conversation.wait();
        } while (check_phone_number(ctx.message, conversation));
    }

    let phone_number = ctx.session.session_db.client.phone
    if(phone_number[0] !== "+"){
        phone_number = "+"+phone_number;
    }


    let res_status = await  check_user_admin(phone_number, ctx.from.id);
    if(res_status.status){

        // success login
        await ctx.reply(`
<i>üéâ ${res_status.data.full_name} —Å–∏–∑ —Ç–∏–∑–∏–º–≥–∞ –º—É–≤–æ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ä–∞–≤–∏—à–¥–∞ –∫–∏—Ä–¥–∏–Ω–≥–∏–∑!</i>      
        `, {
            parse_mode:"HTML",
            reply_markup: { remove_keyboard: true }
        });

        if(ctx.config.role_name === "station_noden"){
            await main_menu_conversation_noden(conversation, ctx)
        }else{
            await main_menu_conversation(conversation, ctx)
        }

    }else{
        // login failed
        let retry_register_btn = new Keyboard()
            .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
            .resized();
        await ctx.reply(`
<b>‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º –±–∞–∑–∞–¥–∞–Ω —Ç–æ–ø–∏–ª–º–∞–¥–∏!</b>   

<i>–≥–∞—Ä —Å–∏–∑ –±—É–Ω–∏ —Ö–∞—Ç–æ –¥–µ–± “≥–∏—Å–æ–±–ª–∞—Å–∞–Ω–≥–∏–∑ “õ—É–π–∏–¥–∞–≥–∏  –º–∞—ä—Å—É–ª —Ö–æ–¥–∏–º–≥–∞ –∞–ª–æ“õ–∞–≥–∞ —á–∏“õ–∏–Ω–≥!</i>  

<i>–ú–∞—ä—Å—É–ª —Ö–æ–¥–∏–º</i>  
<i>üßë‚Äçüíª –ì—É–ª–æ–º–æ–≤ –ë–µ–∫–∑–æ–¥ @Programmer_277</i>   
        `, {
            parse_mode:"HTML",
            reply_markup: retry_register_btn,

        })


    }



}
async function main_menu_conversation(conversation, ctx) {

    let main_btn = new Keyboard()
        .text("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä")
        .row()
        .text("üìÉ –í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞")
        .row()
        .text("üë§ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º")
        .text("üîç –í–∞–≥–æ–Ω “õ–∏–¥–∏—Ä—É–≤")
        .row()
        .text("üì§ –ß–∏“õ–∏—à")
        .text("‚òéÔ∏è –°—É–ø–ø–æ—Ä—Ç")
        .resized();

    await ctx.reply(`<i>‚ö°Ô∏è –ê—Å–æ—Å–∏–π –º–µ–Ω—é ‚ö°Ô∏è</i> `, {
        parse_mode:"HTML",
        reply_markup: main_btn,
    });
   return;
}

async function main_menu_conversation_noden(conversation, ctx) {

    let main_btn = new Keyboard()
        .text("üìâ “≤–∏—Å–æ–±–æ—Ç")
        .row()
        .text("üóû –í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")
        .row()
        .text("üë§ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º")
        .text("üîç –í–∞–≥–æ–Ω “õ–∏–¥–∏—Ä—É–≤")
        .row()
        .text("üì§ –ß–∏“õ–∏—à")
        .text("‚òéÔ∏è –°—É–ø–ø–æ—Ä—Ç")
        .resized();

    await ctx.reply(`<i>‚ö°Ô∏è –ê—Å–æ—Å–∏–π –º–µ–Ω—é ‚ö°Ô∏è</i> `, {
        parse_mode:"HTML",
        reply_markup: main_btn,
    });
    return;
}
async function local_station_conversation(conversation, ctx) {

    let group_btn = new Keyboard()
        .text("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞")
        .row()
        .text("üóû –ê–º–∞–ª –±—û–π–∏—á–∞")
        .row()
        .text("üîô –ê—Å–æ—Å–∏–π –º–µ–Ω—é")
        .resized()
    await ctx.reply("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä", {
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
}

async function station_details_conversation(conversation, ctx) {

    let group_btn = new Keyboard()
        .text("üîΩ –ö–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("üîº –ö–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("‚èπ –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä")
        .row()
        .text("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏")
        .row()
        .text("üîô –û—Ä“õ–∞–≥–∞")
        .resized()
    await ctx.reply("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞", {
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
}

async function duration_time_conversation(conversation, ctx) {
    let res_data_0 = await  filter_by_station_time(ctx.from.id, 0,6);
    let res_data_5 = await  filter_by_station_time(ctx.from.id, 5,11);
    let res_data_10 = await  filter_by_station_time(ctx.from.id, 10,100);

    let button_label_list = [];

    if(res_data_0.data.amount !==0){
        button_label_list.push("1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ üü¢")
    }

    if(res_data_5.data.amount !==0){
        button_label_list.push("6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ üü°")
    }

    if(res_data_10.data.amount !==0){
        button_label_list.push("11 –∫—É–Ω–¥–∞–Ω –∫—û–ø üî¥")
    }

    if(button_label_list.length ===0){
        button_label_list.push("–°—Ç–∞–Ω—Å–∏—è–Ω–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –π—û“õ")
    }


    const buttonRows = button_label_list
        .map((label) => [Keyboard.text(label)]);
    const keyboard = Keyboard.from(buttonRows)
        .row()
        .text("‚óÄÔ∏è –û—Ä“õ–∞–≥–∞")
        .resized();
    await ctx.reply("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏", {
        parse_mode:"HTML",
        reply_markup: keyboard,
    })
}

async function search_wagon_by_number(conversation, ctx){
    ctx = await conversation.wait();
    if (!ctx.message.text) {
        do {
            await ctx.reply(`
<b>‚ö†Ô∏è –ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç —é–±–æ—Ä–¥–∏–Ω–≥–∏–∑</b> 

<i>‚úçÔ∏è –í–∞–≥–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —ë–∑–∏–± —é–±–æ—Ä–∏–Ω–≥</i>
<i>–ú–∞—Å–∞–ª–∞–Ω: <b>23355050</b></i>         
            `, {
                parse_mode: "HTML",
            });
            ctx = await conversation.wait();
        } while (!ctx.message.text);
    }
    let wagon_number = ctx.message.text;
    let res_data = await search_wagon(wagon_number)
    if(res_data.status){
        await message_sender_station_data(ctx, res_data.data)
    }else{
        await ctx.reply(`
<b>üö´ –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω –Ω–æ–º–µ—Ä –±—û–π–∏—á–∞ –±–∞–∑–∞–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏</b>  

<i>–ò–ª—Ç–∏–º–æ—Å “õ–∞–π—Ç–∞ —Ç–µ–∫—à–∏—Ä–∏–± –≤–∞–≥–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —ë–∑–∏–± —é–±–æ—Ä–∏–Ω–≥</i>`,
            {
                parse_mode: "HTML",
            }
            )
    }

    await search_wagon_by_number(conversation, ctx)




}

const check_phone_number = (msg, conversation) => {
    if (msg?.contact) {
        conversation.session.session_db.client.phone = msg.contact.phone_number
        return false
    } else {
        return true
    }

}

const check_order_time = ()=>{
    let current_hour = new Date().getHours() + 2;
    let current_minute = new Date().getMinutes();

    // if(current_hour>=6 && current_hour<9){
    //     return {
    //         status:true,
    //         type_id:1,
    //     }
    // }else if(current_hour>=17 && current_hour<21){
    //     return {
    //         status:true,
    //         type_id:0,
    //     }
    // }else{
    //     return {
    //         status:false,
    //         time:`${current_hour} : ${current_minute}`,
    //     }
    // }

    return {
        status:true,
        type_id:0,
    }
}

async function wagon_type_conversation(conversation, ctx) {

    let group_station = wagon_type_list.map((item)=>item.name +" üöû")
    const buttonRows = group_station
        .map((label) => [Keyboard.text(label)]);
    const keyboard = Keyboard.from(buttonRows)
        .row()
        .text("üîô –ê—Å–æ—Å–∏–π –º–µ–Ω—é")
        .resized();
    await ctx.reply(`<i>‚ö°Ô∏è –í–∞–≥–æ–Ω —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚ö°Ô∏è</i> `, {
        parse_mode:"HTML",
        reply_markup: keyboard,
    });
}

async function wagon_order_conversation(conversation, ctx) {
    let group_btn = new Keyboard()
        .text("üî¥ –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")
        .resized()
    await ctx.reply(`
<b>‚úçÔ∏è –í–∞–≥–æ–Ω —Å–æ–Ω–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥</b>

<i>–ú–∞—Å–∞–ª–∞–Ω: 1; 4; 5</i>    
    `, {
        parse_mode:"HTML",
        reply_markup:group_btn,
    });


    ctx = await conversation.wait();


    if (!(ctx.message?.text && !isNaN(ctx.message?.text))) {
        do {
            await ctx.reply(`
<b>–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–¥–∏–Ω–≥–∏–∑!</b>    

<i>‚úçÔ∏è –ò–ª—Ç–∏–º–æ—Å –≤–∞–≥–æ–Ω —Å–æ–Ω–∏ —ë–∑–∏–Ω–≥</i>
<i>–ú–∞—Å–∞–ª–∞–Ω: 1; 4; 5</i>        
            `, {
                parse_mode: "HTML",
            });
            ctx = await conversation.wait();
        } while (!(ctx.message?.text && !isNaN(ctx.message?.text)));
    }

    let wagon_count = ctx.message?.text;
    let selected_wagon = ctx.session.session_db.selected_type_wagon;
    let wagon_list =  ctx.session.session_db.selected_wagon_list;

    wagon_list.push({
        name:selected_wagon.name,
        id:selected_wagon.id,
        count:wagon_count,
    });

    let action_type_btn = new Keyboard()
        .text("‚ûï –í–∞–≥–æ–Ω “õ—û—à–∏—à")
        .row()
        .text("‚òëÔ∏è –ë—É—é—Ä—Ç–º–∞–Ω–∏ —è–∫—É–Ω–ª–∞—à")
        .resized()
    await ctx.reply(`<i>${wagon_count} - ${selected_wagon.name} ‚úÖ</i>`, {
        parse_mode: "HTML",
        reply_markup:action_type_btn,
    });
}
async function confirm_order_conversation(conversation, ctx) {
    let group_btn = new Keyboard()
        .text("‚û°Ô∏è –é—Ç–∫–∞–∑–∏–± —é–±–æ—Ä–∏—à")
        .resized();

    ctx.session.session_db.selected_wagon_comment = null;
    await ctx.reply(`
<b>‚úçÔ∏è –ë—É—é—Ä—Ç–º–∞ —É—á—É–Ω –∏–∑–æ“≥ —ë–∑–∏–Ω–≥</b>

<i>üí¨ –ò–∑–æ“≥—Å–∏–∑ —è–∫—É–Ω–ª–∞—à —É—á—É–Ω <b>‚û°Ô∏è –é—Ç–∫–∞–∑–∏–± —é–±–æ—Ä–∏—à</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–± —è–∫—É–Ω–ª–∞–Ω–≥!</i>  
    `, {
        parse_mode:"HTML",
        reply_markup:group_btn,
    });


    ctx = await conversation.wait();


    if (!(ctx.message?.text)) {
        do {
            await ctx.reply(`
<b>–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–¥–∏–Ω–≥–∏–∑!</b>    

<i>‚úçÔ∏è –ò–ª—Ç–∏–º–æ—Å –∏–∑–æ“≥ —É—á—É–Ω –º–∞—Ç–Ω–ª–∏ —Ö–∞–±–∞—Ä —ë–∑–∏–Ω–≥</i>      
            `, {
                parse_mode: "HTML",
            });
            ctx = await conversation.wait();
        } while (!(ctx.message?.text));
    }
    if(ctx.message?.text!=='‚û°Ô∏è –é—Ç–∫–∞–∑–∏–± —é–±–æ—Ä–∏—à'){
        ctx.session.session_db.selected_wagon_comment = ctx.message?.text;
    }
    await  review_order_conversation(conversation, ctx);
}
async function review_order_conversation(conversation, ctx) {
    let group_btn = new Keyboard()
        .text("‚úÖ –ë—É—é—Ä—Ç–º–∞–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à")
        .row()
        .text("‚ùå –ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à")
        .row()
        .resized();

    let message = `<b>‚úÖ –ë—É—é—Ä—Ç–º–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏</b>

`;
    let order_list = ctx.session.session_db.selected_wagon_list;
    let comment = ctx.session.session_db.selected_wagon_comment;
    let text = ``;
    for(let i=0; i< order_list.length; i++){
        let order = order_list[i];
        text = text + `
${i+1}) <b>${order.name} - ${order.count} —Ç–∞ –≤–∞–≥–æ–Ω</b>`
    }
    message = message + text +`


<i>üí¨ –ò–∑–æ“≥: ${comment || "–ò–∑–æ“≥ —ë–∑–∏–ª–º–∞–≥–∞–Ω"}</i>    
    `;

    await ctx.reply(message, {
        parse_mode:"HTML",
        reply_markup:group_btn,
    });
}

pm.filter(async (ctx)=> ctx.config.role_name === "station_noden").command("start", async (ctx)=>{
    if(ctx.config.is_registered){
        await ctx.conversation.enter("main_menu_conversation_noden");
    }else{
        let retry_register_btn = new Keyboard()
            .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
            .resized();
        await ctx.reply(`
<b>–°–∞–ª–æ–º üëã. DAS UTY –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑</b>

<i>‚ôªÔ∏è –ë–æ—Ç–¥–∞–Ω —Ç—û–ª–∏“õ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω –æ–ª–¥–∏–Ω —Ç–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –ª–æ–∑–∏–º!</i>

<i>–¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω <b>[üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à]</b>  —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.</i>
    `,{
            parse_mode:"HTML",
            reply_markup: retry_register_btn,
        })
    }
})

// Station ds start
pm.command("start", async (ctx) => {

    console.log(ctx.config)

    if(ctx.config.is_registered){
        await ctx.conversation.enter("main_menu_conversation");
    }else{
        let retry_register_btn = new Keyboard()
            .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
            .resized();
        await ctx.reply(`
<b>–°–∞–ª–æ–º üëã. DAS UTY –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑</b>

<i>‚ôªÔ∏è –ë–æ—Ç–¥–∞–Ω —Ç—û–ª–∏“õ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω –æ–ª–¥–∏–Ω —Ç–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –ª–æ–∑–∏–º!</i>

<i>–¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω <b>[üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à]</b>  —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.</i>
    `,{
            parse_mode:"HTML",
            reply_markup: retry_register_btn,
        })
    }

})

pm.hears("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à", async (ctx)=>{
    await ctx.conversation.enter("register_user_phone");
})
pm.hears("üì§ –ß–∏“õ–∏—à", async (ctx)=>{
    let res_data = await logOut_user(ctx.from.id);
    let retry_register_btn = new Keyboard()
        .text("üîí –¢–∏–∑–∏–º–≥–∞ –∫–∏—Ä–∏—à")
        .resized();
    await ctx.reply("üî¥ –¢–∏–∑–∏–º–¥–∞–Ω —á–∏“õ–¥–∏–Ω–≥–∏–∑!", {
        parse_mode:"HTML",
        reply_markup: retry_register_btn,
    })

})


async function message_sender_station_data(ctx, msg) {
    return new Promise((resolve, reject) => {
        setTimeout(async () => {
            try {
let text_1 = `
<b><i>#“≤–∏—Å–æ–±–æ—Ç</i></b>
<b>${msg.first_station?.station_name_ru}</b> ‚û°Ô∏è <b>${msg.current_station?.station_name_ru}</b> ‚û°Ô∏è <b>${msg.last_station?.station_name_ru}</b>

üöÉ –í–∞–≥–æ–Ω —Ä–∞“õ–∞–º–∏: <b>${msg.vagon_number}</b>`
                if(msg.index.length === 17){
                    text_1 = text_1 + `
üßæ –ü–æ–µ–∑–¥ –∏–Ω–¥–µ—Ö: <b>${msg.index} </b>`
                }

                text_1 = text_1 + `

üì¶ –Æ–∫ –Ω–æ–º–∏: <b>${msg.cargo_name}</b>    
üîç –Æ–∫ –º–∞—Å—Å–∞—Å–∏: <b>${Math.ceil(msg.cargo_massa/1000)} —Ç </b>  
 
üèó –ê–º–∞–ª –Ω–æ–º–∏: <b>${msg.action_name}</b>    
üóì –ê–º–∞–ª —Å–∞–Ω–∞—Å–∏: <b>${new Date(msg.action_date).toLocaleDateString('vi-VN')} </b> 
   
üèÅ –ß–∏“õ“õ–∞–Ω —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.first_station?.station_name_ru}</b>     
üè≥Ô∏è –ñ–æ—Ä–∏–π —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.current_station?.station_name_ru} </b>     
‚è∞ –°–∞—Ä–∏—Ñ–ª–∞–Ω–≥–∞–Ω –≤–∞“õ—Ç: <b>${msg.wait_time} –∫—É–Ω</b>     
üè¥ –ë–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è: <b>${msg.last_station?.station_name_ru} </b>  

#“≤–∏—Å–æ–±–æ—Ç #dasuty_station_bot
‚ìÇÔ∏è –ú–∞–Ω–±–∞: @dasuty_station_bot                  
                    `


                await  ctx.reply(text_1, {
                    parse_mode:"HTML",
                });
                resolve(true);
            } catch (error) {
                console.log(error)
                reject(false)
            }

        }, 100)
    })
}


pm.hears("üì¶ –ú–∞“≥–∞–ª–ª–∏–π —é–∫–ª–∞—Ä", async (ctx)=>{
    await ctx.conversation.enter("local_station_conversation");
})


const leaving_station_btn = new Menu("leaving_station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_leaving_station(item.user_station_id, item.id);

                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(leaving_station_btn)
pm.hears("üîº –ö–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await filter_by_leaving_station(user_id);

    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–¥–∞–Ω –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ “≥–æ–∑–∏—Ä–¥–∞ —Ç—É—Ä–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count} </b> ta vagon`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b> ta vagon



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: leaving_station_btn,
    })

})


const current_station_btn = new Menu("current_station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_last_station(item.user_station_id, item.id);

                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(current_station_btn)
pm.hears("‚èπ –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await filter_by_current_station(user_id);

    let group_station = res_data.data.group_station;


     ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count} </b> ta vagon`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b> ta vagon



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>
    `
   await ctx.reply(msg_template,{
       parse_mode:"HTML",
       reply_markup: current_station_btn,
   })

})


pm.hears("üïê –¢—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä –º—É–¥–¥–∞—Ç–∏", async (ctx)=>{
    await ctx.conversation.enter("duration_time_conversation");
})

pm.hears("üóû –ê–º–∞–ª –±—û–π–∏—á–∞", async (ctx)=>{

    let res_data = await get_all_action();

    let group_station = res_data.data.map((item)=>item.action_name +" üìÑ")

    const buttonRows = group_station
        .map((label) => [Keyboard.text(label)]);
    const keyboard = Keyboard.from(buttonRows)
        .row()
        .text("üîô –û—Ä“õ–∞–≥–∞")
        .resized();



    let msg_template =  `üóû –ê–º–∞–ª –±—û–π–∏—á–∞`
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: keyboard,
    })

})


const station_btn = new Menu("station_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station(item.id, item.user_station_id);
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(station_btn)
pm.hears("üîΩ –ö–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä", async (ctx)=>{
    let user_id = ctx.from.id;
    let res_data = await enter_to_station_report(user_id);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üìä –°—Ç–∞–Ω—Å–∏—è–≥–∞ –∫–µ–ª–∞—ë—Ç–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ “≥–æ–∑–∏—Ä–¥–∞ —Ç—É—Ä–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: station_btn,
    })

})

pm.hears("üöè –°—Ç–∞–Ω—Å–∏—è –±—û–π–∏—á–∞", async (ctx)=>{
    await ctx.conversation.enter("station_details_conversation");
})

const duration_1_5_btn = new Menu("duration_1_5_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,0,6 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_1_5_btn)
pm.hears("1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ üü¢", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 0,6);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>üü¢ 1 –∫—É–Ω–¥–∞–Ω - 5 –∫—É–Ω–≥–∞—á–∞ —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_1_5_btn,
    })
})

const duration_6_10_btn = new Menu("duration_6_10_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,5,11 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_6_10_btn)
pm.hears("6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ üü°", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 5,11);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>‚õîÔ∏è 6 –∫—É–Ω–¥–∞–Ω - 10 –∫—É–Ω–≥–∞—á–∞ —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_6_10_btn,
    })
})


const duration_11_btn = new Menu("duration_11_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_station_time( item.user_station_id,item.id,10,1000 );
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(duration_11_btn)
pm.hears("11 –∫—É–Ω–¥–∞–Ω –∫—û–ø üî¥", async (ctx)=>{

    let res_data = await  filter_by_station_time(ctx.from.id, 10,1000);
    let group_station = res_data.data.group_station;
    ctx.session.session_db.group_station_list = group_station;
    let msg_template =  `
<b>‚õîÔ∏è 11 –∫—É–Ω–¥–∞–Ω –∫—û–ø —Å—Ç–∞–Ω—Å–∏—è–¥–∞ —Ç—É—Ä–≥–∞–Ω –≤–∞–≥–æ–Ω–ª–∞—Ä–Ω–∏–Ω–≥ –±–æ—Ä–∞—ë—Ç–≥–∞–Ω —Å—Ç–∞–Ω—Å–∏—è–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–æ—Ç–∏</b>
    `
    group_station.forEach((item, index)=>{
        msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
    })

    msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá–ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
    await ctx.reply(msg_template,{
        parse_mode:"HTML",
        reply_markup: duration_11_btn,
    })
})

pm.hears("üìâ “≤–∏—Å–æ–±–æ—Ç", async (ctx)=>{
    let res_data = await noden_report_by_station(ctx.config.role_id)
    if(res_data.status){
        await ctx.reply("üïì Hisobot tayorlanmoqda kuting...");
        const workbook = new ExcelJS.Workbook();
        const worksheet  = workbook.addWorksheet("Hisobot");
        worksheet .addRow(['Vagon raqami', 'Chiqqan stansiya', 'Turgan stansiya', "Borayotgan stansiya", "Index"]);

        const rowNumber = 1;

        // Fill color you want to set
        const fillColor = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '85b2f9' } // Red background color
        };

        worksheet.getRow(rowNumber).eachCell({ includeEmpty: true }, cell => {
            cell.fill = fillColor;
        });

        let station_list = res_data.data;
        for(let i=0; i<station_list.length; i++){
            let station = station_list[i];
            worksheet .addRow([station.vagon_number, station.first_station.station_name_ru, station.current_station.station_name_ru, station.last_station.station_name_ru, station.index,]);
        }
        const filePath = './download/reportOfNoden.xlsx';
        workbook.xlsx.writeFile(filePath)
            .then(()=> {
                console.log('Excel file created successfully.');
                let file_path =  new InputFile(filePath)
                ctx.replyWithDocument(file_path)
            })
            .catch(function(error) {
                console.error('Error:', error);
            });
        await ctx.reply("‚úÖ Yakunlandi");



    }

})
pm.hears("üóû –í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä", async (ctx)=>{
    await ctx.reply("–ò–ª—Ç–∏–º–æ—Å –∫—É—Ç–∏–Ω–≥")
    let res_data = await wagon_order_report(ctx.config.role_id);



    if(res_data.status){
        const workbook = new ExcelJS.Workbook();
        const worksheet  = workbook.addWorksheet("–í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞");
        worksheet .addRow(['–°—Ç–∞–Ω—Å–∏—è –Ω–æ–º–∏', '–í–∞–≥–æ–Ω —Ç—É—Ä–∏', '–í–∞–≥–æ–Ω —Å–æ–Ω–∏', "“ö—û—à–∏–º—á–∞ –∏–∑–æ“≥", "–í–∞“õ—Ç"]);

        const rowNumber = 1;

        // Fill color you want to set
        const fillColor = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '85b2f9' } // Red background color
        };
        worksheet.getRow(rowNumber).eachCell({ includeEmpty: true }, cell => {
            cell.fill = fillColor;
        });

        let report_list = res_data.data;
        for(let i=0; i<report_list.length; i++){
            let report = report_list[i];
            let station_name = report.station_id?.station_name_ru;
            let order_comment = report.order_comment;
            // let order_date = new Date(report.created_at).toLocaleString("uz-UZ");
            const selectedDate = moment(report.created_at);
            const order_date = selectedDate.tz('Asia/Tashkent').format('YYYY-MM-DD HH:mm:ss')


            for(let j=0; j<report.order_list.length; j++){
                let wagon_order = report.order_list[j]
                worksheet .addRow([station_name, wagon_order.name, wagon_order.count,order_comment, order_date ]);
            }

        }

        const filePath = './download/–í–∞–≥–æ–Ω–ë—É—é—Ä—Ç–º–∞.xlsx';
        workbook.xlsx.writeFile(filePath)
            .then(()=> {
                console.log('Excel file created successfully.');
                let file_path =  new InputFile(filePath)
                ctx.replyWithDocument(file_path)
            })
            .catch(function(error) {
                console.error('Error:', error);
            });
        await ctx.reply("‚úÖ –Ø–∫—É–Ω–ª–∞–Ω–¥–∏");

    }else{
        await ctx.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ö–∞—Ç–æ—Å–∏")
    }


})








pm.hears("üìÉ –í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞", async (ctx)=>{
   let check_time =  check_order_time();
   if(check_time.status){
       await ctx.conversation.enter("wagon_type_conversation");
   }else{
       await ctx.reply(`
<b>‚ö†Ô∏è –†—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–º–∞–¥–∏!</b>

<i>–í–∞–≥–æ–Ω —É—á—É–Ω  –±—É—é—Ä—Ç–º–∞–ª–∞—Ä —Å–æ–∞—Ç <b>6:00 –¥–∞–Ω 9:00 –≥–∞—á–∞ </b> –≤–∞ <b>17:00 –¥–∞–Ω 21:00 –≥–∞—á–∞</b>  –≤–∞“õ—Ç –æ—Ä–∞–ª–∏“õ–ª–∞—Ä–¥–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–∞–¥–∏.</i>  

üïü <i>–í–∞“õ—Ç <b>${check_time.time}</b></i>
     
       `, {
           parse_mode:"HTML"
       })
   }



})
pm.hears("‚ûï –í–∞–≥–æ–Ω “õ—û—à–∏—à", async (ctx)=>{
    await ctx.conversation.enter("wagon_type_conversation");

})
pm.hears("‚òëÔ∏è –ë—É—é—Ä—Ç–º–∞–Ω–∏ —è–∫—É–Ω–ª–∞—à", async (ctx)=>{
    await ctx.conversation.enter("confirm_order_conversation");

})
pm.hears("‚û°Ô∏è –é—Ç–∫–∞–∑–∏–± —é–±–æ—Ä–∏—à", async (ctx)=>{
    await ctx.conversation.enter("review_order_conversation");

})

pm.hears("‚ùå –ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à", async (ctx)=>{
    ctx.session.session_db.selected_wagon_list = [];
    ctx.session.session_db.selected_wagon_comment=null;
    await ctx.reply("–í–∞–≥–æ–Ω –±—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏! ‚ùå")
    await ctx.conversation.enter("main_menu_conversation");

})

pm.hears("‚úÖ –ë—É—é—Ä—Ç–º–∞–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à", async (ctx)=>{

    let check_time = check_order_time();
    if(check_time.status){
        let order_list = ctx.session.session_db.selected_wagon_list;
        let comment = ctx.session.session_db.selected_wagon_comment;
        let data = {
            user_id:ctx.from.id,
            order_list:order_list,
            order_comment:comment,
            order_type:0,
            station_id:ctx.config.station_id,
            station_parent_id:ctx.config.station_parent_id,
        }
        let res_data = await register_order(data);
        if(res_data.status){
            await ctx.reply("‚úÖ –ë—É—é—Ä—Ç–º–∞ –º—É–≤–æ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏");

        }else{
            await ctx.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ö–∞—Ç–æ—Å–∏");
        }
        await ctx.conversation.enter("main_menu_conversation");
    }else{

        await ctx.reply(`
<b>‚ö†Ô∏è –†—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–º–∞–¥–∏!</b>

<i>–í–∞–≥–æ–Ω —É—á—É–Ω  –±—É—é—Ä—Ç–º–∞–ª–∞—Ä —Å–æ–∞—Ç <b>6:00 –¥–∞–Ω 9:00 –≥–∞—á–∞ </b> –≤–∞ <b>17:00 –¥–∞–Ω 21:00 –≥–∞—á–∞</b>  –≤–∞“õ—Ç –æ—Ä–∞–ª–∏“õ–ª–∞—Ä–¥–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–∞–¥–∏.</i>   

üïü <i>–í–∞“õ—Ç <b>${check_time.time}</b></i>    
       `, {
            parse_mode:"HTML"
        })
        await ctx.conversation.enter("main_menu_conversation");
    }



})









// back buttons
pm.hears("üîô –ê—Å–æ—Å–∏–π –º–µ–Ω—é", async (ctx)=>{
    await ctx.conversation.enter("main_menu_conversation");
})


pm.hears("üîô –û—Ä“õ–∞–≥–∞", async (ctx)=>{
    await ctx.conversation.enter("local_station_conversation");
})

pm.hears("‚óÄÔ∏è –û—Ä“õ–∞–≥–∞", async (ctx)=>{
    await ctx.conversation.enter("station_details_conversation");
})

pm.hears("üî¥ –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à", async (ctx)=>{
    await ctx.conversation.enter("main_menu_conversation");
})





// main menu buttons
pm.hears("üë§ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º", async (ctx)=>{

    let res_data = await my_user_info(ctx.from.id);
    let report_data = await get_report();
    let report = report_data.data[0];

    if(res_data.status){
        await ctx.reply(`
<b>üë§ –ü—Ä–æ—Ñ–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º</b>  

üöè –°—Ç–∞–Ω—Å–∏—è: <b>${res_data.data?.organization?.station_name_ru}</b>
üë§ –ò—Å–º: <b>${res_data.data.full_name}</b>
‚òéÔ∏è –¢–µ–ª–ª: <b>${res_data.data.phone}</b>
üÜî –ò–¥: <b>${ctx.from.id}</b>

<b>“≤–ò–°–û–ë–û–¢</b>

<i>‚ôªÔ∏è –¢—É—Ä–∏: <b>"${report?.type}"</b></i>
<i>üìà –ù–æ–º–∏: <b>"${report?.title}"</b></i>
<i>üîÑ –û—Ö–∏—Ä–≥–∏ —è–Ω–≥–∏–ª–∞–Ω–∏—à: <b>${report?.date.split('–Ω–∞')[1]}</b></i>


    `,{
            parse_mode:"HTML",
        })
    }


})
pm.hears("‚òéÔ∏è –°—É–ø–ø–æ—Ä—Ç", async (ctx)=>{
    await ctx.reply(`
<b>‚òéÔ∏è –¢–µ–∑–∫–æ—Ä “õ—û–ª–ª–∞–± “õ—É–≤–∞—Ç–ª–∞—à –º–∞—Ä–∫–∞–∑–∏</b>  

–ú–∞—ä—Å—É–ª –º—É—Ç–∞—Ö–∞—Å–∏—Å–ª–∞—Ä:
<i>üßë‚Äçüíª –ë–µ–∫–∑–æ–¥ –ì—É–ª–æ–º–æ–≤</i>
<b>‚òéÔ∏è @Programmer_277</b>  
<i>üßë‚Äçüíª –ñ–∞–º—à–∏–¥ –†–∞—Ö–∏–º–æ–≤</i>
<b>‚òéÔ∏è @Jamacoder</b>  

<i>‚úçÔ∏è –ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à –≤–∞“õ—Ç–∏–¥–∞ “õ–∞–Ω–¥–∞–π–¥–∏—Ä —Ö–∞—Ç–æ–ª–∏–∫–Ω–∏ —Å–µ–∑—Å–∞–Ω–≥–∏–∑ –º—É—Ç–∞—Ö–∞—Å–∏—Å–ª–∞—Ä–∏–º–∏–∑–≥–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–∏—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑!</i>

    `,{
        parse_mode:"HTML",
    })
})

pm.hears("üîç –í–∞–≥–æ–Ω “õ–∏–¥–∏—Ä—É–≤", async (ctx)=>{
    let group_btn = new Keyboard()
        .text("üî¥ –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")
        .row()
        .resized();

    await ctx.reply(`
<b>üîç –í–∞–≥–æ–Ω–Ω–∏ –Ω–æ–º–µ—Ä –æ—Ä“õ–∞–ª–∏ “õ–∏–¥–∏—Ä—É–≤</b>

<i>‚úçÔ∏è –í–∞–≥–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —ë–∑–∏–± —é–±–æ—Ä–∏–Ω–≥</i>
<i>–ú–∞—Å–∞–ª–∞–Ω: <b>23355050</b></i>

    
    `,{
        parse_mode:"HTML",
        reply_markup: group_btn,
    })
    await ctx.conversation.enter("search_wagon_by_number");
})
















const action_name_btn = new Menu("action_name_btn")
    .dynamic(async (ctx, range) => {
        let list = ctx.session.session_db.group_station_list
        list.forEach((item, index) => {
            range
                .text( "üöû "+item.name + " - "+item.count+ " —Ç–∞ –≤–∞–≥–æ–Ω" , async (ctx) => {
                    await ctx.answerCallbackQuery();
                    await ctx.deleteMessage();
                    let res_data = await find_cargo_by_action(item.id, item.user_station_id, item.action_name_id);
                    if(res_data.status){
                        let station_list = res_data.data;
                        for(let i=0; i<station_list.length; i++){
                            let message = station_list[i];
                            await message_sender_station_data(ctx, message)
                        }
                    }

                })
                .row();
        })
    })
pm.use(action_name_btn)

bot.filter(async (ctx)=> ctx.message?.text?.toString()?.includes('üìÑ')).on("msg", async (ctx) => {
    let split_text = ctx.msg.text.split('üìÑ')[0];
    let res_data = await  filter_action_by_name (split_text.trim(), ctx.from.id);
    if(res_data.data){
        console.log(res_data.data)

        let group_station = res_data.data.group_station
        ctx.session.session_db.group_station_list = group_station;
        let msg_template =  `
<b>üìä “≤–∏—Å–æ–±–æ—Ç</b>
    `
        group_station.forEach((item, index)=>{
            msg_template =msg_template + `
 ${item.name}: <b>${item.count}</b>`;
        })

        msg_template = msg_template +`

<i>üìë –£–º—É–º–∏–π –≤–∞–≥–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏</i>: <b>${res_data.data.amount}</b>



<i>üëá –ë–∞—ä—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫–ª–∏ —Å—Ç–∞–Ω—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥</i>    
    `
        await ctx.reply(msg_template,{
            parse_mode:"HTML",
            reply_markup: action_name_btn,
        })



    }
});

bot.filter(async (ctx)=> ctx.message?.text?.toString()?.includes('üöû')).on('msg', async (ctx)=>{
    let split_text = ctx.msg.text.split('üöû')[0];
    let selected_wagon = wagon_type_list.filter((item)=> item.name === split_text.trim());
    if(selected_wagon.length===1){
        ctx.session.session_db.selected_type_wagon =selected_wagon[0];
        await ctx.conversation.enter("wagon_order_conversation");
    }
})








module.exports = bot;